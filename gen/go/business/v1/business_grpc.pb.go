// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: business/v1/business.proto

package business

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BusinessClient is the client API for Business service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessClient interface {
	CreateNewOrderUnit(ctx context.Context, in *CreateNewOrderUnitRequest, opts ...grpc.CallOption) (*CreateNewOrderUnitResponse, error)
	DeleteOrderUnit(ctx context.Context, in *DeleteOrderUnitRequest, opts ...grpc.CallOption) (*DeleteOrderUnitResponse, error)
	AddInventoryItem(ctx context.Context, in *AddInventoryItemRequest, opts ...grpc.CallOption) (*AddInventoryItemResponse, error)
	GetManyInventoryItems(ctx context.Context, in *GetManyInventoryItemsRequest, opts ...grpc.CallOption) (*GetManyInventoryItemsResponse, error)
	DeleteInventoryItem(ctx context.Context, in *DeleteInventoryItemRequest, opts ...grpc.CallOption) (*DeleteInventoryItemResponse, error)
}

type businessClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessClient(cc grpc.ClientConnInterface) BusinessClient {
	return &businessClient{cc}
}

func (c *businessClient) CreateNewOrderUnit(ctx context.Context, in *CreateNewOrderUnitRequest, opts ...grpc.CallOption) (*CreateNewOrderUnitResponse, error) {
	out := new(CreateNewOrderUnitResponse)
	err := c.cc.Invoke(ctx, "/business.v1.Business/CreateNewOrderUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) DeleteOrderUnit(ctx context.Context, in *DeleteOrderUnitRequest, opts ...grpc.CallOption) (*DeleteOrderUnitResponse, error) {
	out := new(DeleteOrderUnitResponse)
	err := c.cc.Invoke(ctx, "/business.v1.Business/DeleteOrderUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) AddInventoryItem(ctx context.Context, in *AddInventoryItemRequest, opts ...grpc.CallOption) (*AddInventoryItemResponse, error) {
	out := new(AddInventoryItemResponse)
	err := c.cc.Invoke(ctx, "/business.v1.Business/AddInventoryItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) GetManyInventoryItems(ctx context.Context, in *GetManyInventoryItemsRequest, opts ...grpc.CallOption) (*GetManyInventoryItemsResponse, error) {
	out := new(GetManyInventoryItemsResponse)
	err := c.cc.Invoke(ctx, "/business.v1.Business/GetManyInventoryItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) DeleteInventoryItem(ctx context.Context, in *DeleteInventoryItemRequest, opts ...grpc.CallOption) (*DeleteInventoryItemResponse, error) {
	out := new(DeleteInventoryItemResponse)
	err := c.cc.Invoke(ctx, "/business.v1.Business/DeleteInventoryItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessServer is the server API for Business service.
// All implementations must embed UnimplementedBusinessServer
// for forward compatibility
type BusinessServer interface {
	CreateNewOrderUnit(context.Context, *CreateNewOrderUnitRequest) (*CreateNewOrderUnitResponse, error)
	DeleteOrderUnit(context.Context, *DeleteOrderUnitRequest) (*DeleteOrderUnitResponse, error)
	AddInventoryItem(context.Context, *AddInventoryItemRequest) (*AddInventoryItemResponse, error)
	GetManyInventoryItems(context.Context, *GetManyInventoryItemsRequest) (*GetManyInventoryItemsResponse, error)
	DeleteInventoryItem(context.Context, *DeleteInventoryItemRequest) (*DeleteInventoryItemResponse, error)
	mustEmbedUnimplementedBusinessServer()
}

// UnimplementedBusinessServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessServer struct {
}

func (UnimplementedBusinessServer) CreateNewOrderUnit(context.Context, *CreateNewOrderUnitRequest) (*CreateNewOrderUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewOrderUnit not implemented")
}
func (UnimplementedBusinessServer) DeleteOrderUnit(context.Context, *DeleteOrderUnitRequest) (*DeleteOrderUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderUnit not implemented")
}
func (UnimplementedBusinessServer) AddInventoryItem(context.Context, *AddInventoryItemRequest) (*AddInventoryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInventoryItem not implemented")
}
func (UnimplementedBusinessServer) GetManyInventoryItems(context.Context, *GetManyInventoryItemsRequest) (*GetManyInventoryItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManyInventoryItems not implemented")
}
func (UnimplementedBusinessServer) DeleteInventoryItem(context.Context, *DeleteInventoryItemRequest) (*DeleteInventoryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInventoryItem not implemented")
}
func (UnimplementedBusinessServer) mustEmbedUnimplementedBusinessServer() {}

// UnsafeBusinessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessServer will
// result in compilation errors.
type UnsafeBusinessServer interface {
	mustEmbedUnimplementedBusinessServer()
}

func RegisterBusinessServer(s grpc.ServiceRegistrar, srv BusinessServer) {
	s.RegisterService(&Business_ServiceDesc, srv)
}

func _Business_CreateNewOrderUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewOrderUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).CreateNewOrderUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.v1.Business/CreateNewOrderUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).CreateNewOrderUnit(ctx, req.(*CreateNewOrderUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_DeleteOrderUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).DeleteOrderUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.v1.Business/DeleteOrderUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).DeleteOrderUnit(ctx, req.(*DeleteOrderUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_AddInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).AddInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.v1.Business/AddInventoryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).AddInventoryItem(ctx, req.(*AddInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_GetManyInventoryItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyInventoryItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).GetManyInventoryItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.v1.Business/GetManyInventoryItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).GetManyInventoryItems(ctx, req.(*GetManyInventoryItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_DeleteInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).DeleteInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.v1.Business/DeleteInventoryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).DeleteInventoryItem(ctx, req.(*DeleteInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Business_ServiceDesc is the grpc.ServiceDesc for Business service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Business_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "business.v1.Business",
	HandlerType: (*BusinessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewOrderUnit",
			Handler:    _Business_CreateNewOrderUnit_Handler,
		},
		{
			MethodName: "DeleteOrderUnit",
			Handler:    _Business_DeleteOrderUnit_Handler,
		},
		{
			MethodName: "AddInventoryItem",
			Handler:    _Business_AddInventoryItem_Handler,
		},
		{
			MethodName: "GetManyInventoryItems",
			Handler:    _Business_GetManyInventoryItems_Handler,
		},
		{
			MethodName: "DeleteInventoryItem",
			Handler:    _Business_DeleteInventoryItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "business/v1/business.proto",
}
